{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dd20cc80-77d0-44b9-a9f0-a8dc2079ff32",
   "metadata": {},
   "source": [
    "# Interpretasi Hasil Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60ed9017-5ecc-4103-9c68-edd9ef6e08d9",
   "metadata": {},
   "source": [
    ">## import library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e72a20e1-3186-4d27-b343-56fabe6556bb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.compose import ColumnTransformer, make_column_selector as selector\n",
    "\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from imblearn.combine import SMOTETomek\n",
    "\n",
    "\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e1fa2f74-1a78-48fa-babb-922c4c366c46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.6.1\n"
     ]
    }
   ],
   "source": [
    "import sklearn\n",
    "print(sklearn.__version__)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e30ab3b4-be98-43c2-b80e-c6f5296329af",
   "metadata": {},
   "source": [
    ">## impor model & dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "747f9e98-50e8-4380-b0e1-f26a9afc5f50",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('DataFrame_processed/DataFrame_processed.csv')\n",
    "X = df.drop(columns=[\"Attrition\"])\n",
    "y = df[\"Attrition\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b6127d51-c1d0-4aa1-afd5-70edb8b7a783",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression\n",
    "logreg = joblib.load(\"models/logreg_tuned.pkl\")\n",
    "\n",
    "# Decision Tree Classifier\n",
    "tree = joblib.load(\"models/tree_tuned.pkl\")\n",
    "\n",
    "# Bagging Classifier\n",
    "bagging = joblib.load(\"models/bagging_tuned.pkl\")\n",
    "\n",
    "# Adaboost Classifier\n",
    "adaboost = joblib.load(\"models/boost_tuned.pkl\")\n",
    "\n",
    "# Stacking\n",
    "stack = joblib.load(\"models/stack_tuned.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "71da6237-5d89-477a-aad2-a1426a2c8b22",
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "xgb_loaded = XGBClassifier()\n",
    "xgb_loaded.load_model(\"models/xgb_tuned_model_only.json\")\n",
    "\n",
    "prep = ColumnTransformer(\n",
    "    transformers=[\n",
    "        (\"num\", StandardScaler(), selector(dtype_include=np.number)),\n",
    "        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False), selector(dtype_exclude=np.number)),\n",
    "    ],\n",
    "    remainder=\"drop\"\n",
    ")\n",
    "\n",
    "# XGboost Classifier\n",
    "xgb_pipe = ImbPipeline(steps=[\n",
    "    (\"prep\", prep),\n",
    "    (\"smote\", SMOTETomek(random_state=42)),\n",
    "    (\"clf\", xgb_loaded)\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1555b335-af29-465e-82b2-2cb37a87ab1b",
   "metadata": {},
   "source": [
    "## MODEL 1 - LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fa9230b-af1c-4dae-8951-8113bac1ad37",
   "metadata": {},
   "source": [
    ">### Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcf54888-0a2f-42da-96c1-c5d662196c07",
   "metadata": {},
   "source": [
    ">### SHAP Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ed0d14d-cf17-4205-9e0a-0d48b85891da",
   "metadata": {},
   "source": [
    ">### Bias & Fairness Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14d998fb-ce86-46fd-8005-20c483f9faaa",
   "metadata": {},
   "source": [
    "## MODEL 2 - DECISION TREE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23c20c9b-e6b5-451a-a24b-7b2ec23ab25a",
   "metadata": {},
   "source": [
    ">### Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1736b772-7d9a-47dc-a48b-49627eccfbd1",
   "metadata": {},
   "source": [
    ">### SHAP Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97747d7a-c71d-46e4-99b9-8726d5a02c71",
   "metadata": {},
   "source": [
    ">### Bias & Fairness Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c96e933-23a6-40a5-ae2f-41f5d78af7b5",
   "metadata": {},
   "source": [
    "## MODEL 3 - BAGGING CLASSIFIER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a50254a0-72ea-43e3-9e31-2659e30703a4",
   "metadata": {},
   "source": [
    ">### Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e748839-b2c1-4be5-b0df-d96ba01537d4",
   "metadata": {},
   "source": [
    ">### SHAP Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52833452-7912-4a41-ae07-b2457c5bdf61",
   "metadata": {},
   "source": [
    ">### Bias & Fairness Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "983e29bf-648d-4881-a5be-ba5205083e52",
   "metadata": {},
   "source": [
    "## MODEL 4 - ADABOOST CLASSIFIER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94f66d27-4f40-485e-9248-6c75c2679fec",
   "metadata": {},
   "source": [
    ">### Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5605dd96-81ec-4796-a346-c30a856096f5",
   "metadata": {},
   "source": [
    ">### SHAP Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bfed8a9-70cd-44fc-9128-a6a7eb948288",
   "metadata": {},
   "source": [
    ">### Bias & Fairness Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45df2a07-1774-4ca2-a1f0-54b09f9d0d3a",
   "metadata": {},
   "source": [
    "## MODEL 5 - XGBOOST CLASSIFIER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ea0b573-2ee9-4107-a710-c0415cfc6f8f",
   "metadata": {},
   "source": [
    ">### Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65092553-ba1d-4a84-96b6-caef8d9dc033",
   "metadata": {},
   "source": [
    ">### SHAP Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff1017e2-c352-4668-bb60-a6d686662306",
   "metadata": {},
   "source": [
    ">### Bias & Fairness Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d0171df-7888-41a0-ba1f-14fbc7cd1aef",
   "metadata": {},
   "source": [
    "## MODEL 6 - STACKING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "260359c6-33c4-41e5-9827-077ed59dc34f",
   "metadata": {},
   "source": [
    ">### Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bc617ac-1f0d-4b5f-87ac-3a698bd28eb8",
   "metadata": {},
   "source": [
    ">### SHAP Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "894ab830-cc86-4561-864e-33bb39bd44bd",
   "metadata": {},
   "source": [
    ">### Bias & Fairness Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9be3d5f-f6e4-4225-9a69-1e19336083bd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
